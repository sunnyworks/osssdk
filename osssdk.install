<?php
/**
 * @file
 * Provides installation functions.
 */


/**
 * Implements hook_uninstall().
 */
function osssdk_uninstall() {
  // Remove all variables.
  variable_del('osssdk_key_id');
  variable_del('osssdk_key_secret');
}

/**
 * Implements hook_requirements().
 */
function osssdk_requirements($phase) {
  $t = get_t();
  $requirements = array();

  // None of these requirements are relevant outside of runtime.
  if ($phase != 'runtime') {
    return $requirements;
  }

  $info = libraries_load('osssdk');
  if (!$info['loaded']) {
    $requirements['osssdk'] = array(
      'severity' => REQUIREMENT_ERROR,
      'title' => $t('OSS SDK'),
      'value' => $t('Failed to load the OSS SDK'),
      'description' => $t('Please make sure the OSS SDK library is installed in the libraries directory.'),
    );
  }
  elseif (!$info['version'] || version_compare($info['version'], OSSSDK_MINIMUM_VERSION) < 0) {
    $requirements['osssdk'] = array(
      'severity' => REQUIREMENT_ERROR,
      'title' => $t('OSS SDK'),
      'value' => $info['version'],
      'description' => $t('Please make sure the OSS SDK library installed is ' . OSSSDK_MINIMUM_VERSION . ' or greater.'),
    );
  }
  else {
    $requirements['osssdk'] = array(
      'severity' => REQUIREMENT_OK,
      'title' => $t('OSS SDK'),
      'value' => $info['version'],
    );

    // Ensure that the two required id/secret fields have been set.
    if (variable_get('osssdk_key_id', '') == '' || variable_get('osssdk_key_secret', '') == '') {
      $requirements['osssdk']['severity'] = REQUIREMENT_WARNING;
      $requirements['osssdk']['description'] = $t('The required OSS SDK access key id and secret have not been set.');

      // Add link to configuration form.
      $requirements['osssdk']['description'] .= ' [' . l($t('configuration'), 'admin/config/media/osssdk') . ']';
    }
  }

  return $requirements;
}
